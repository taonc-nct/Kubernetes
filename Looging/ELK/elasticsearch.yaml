---
# Source: elasticsearch/templates/secret-cert.yaml
apiVersion: v1
kind: Secret
type: kubernetes.io/tls
metadata:
  name: elasticsearch-master-certs
  labels:
    app: elasticsearch-master
    chart: "elasticsearch"
    heritage: Helm
    release: release-name
data:
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURpRENDQW5DZ0F3SUJBZ0lSQUxqeFRMeUpOdVVxT3Y2RjlwOXA1a013RFFZSktvWklodmNOQVFFTEJRQXcKR3pFWk1CY0dBMVVFQXhNUVpXeGhjM1JwWTNObFlYSmphQzFqWVRBZUZ3MHlNekEzTURZd016TTRNamxhRncweQpOREEzTURVd016TTRNamxhTUI4eEhUQWJCZ05WQkFNVEZHVnNZWE4wYVdOelpXRnlZMmd0YldGemRHVnlNSUlCCklqQU5CZ2txaGtpRzl3MEJBUUVGQUFPQ0FROEFNSUlCQ2dLQ0FRRUE0VFNRZzNxTmcwbW9vd1IzSHlGVHhiSFgKMllFYmVmT1JMVlBRbWRmNVFlNWZoMGxXdGZzajJ2djZqUGlEMFhZT1RPVnpHQVVzcm5DZTk1N01VMkJjNWVBZwpyK1B6T1Y3T3FtdWF3U09VcFhQSWVzSUVXaHNVa3RhWC9GdkJCRVcvaU9wL2hkS2p5cDc0Mk1QQ0REWVBmZVFhCldFQ2E1cnk2RzBnU2NBaGtONXdaVEY0WWlMbWdwdUZreXNDSHg4WTFlK20wK2ZCTTMvSjR1NXpGWnhiS2R5bTkKbm9mWWhBZWxrZnNaMXFoNmxjS2U0cEF2MmFhczNnR3FIOFg3MkdBSk13T3FmSFJnZy9yVzZpbEpZbWRBakxOTApPSkJMcHN6K3dOSndHeTloWnZ3MkdaK2E5elVjSzZBNTBNSUtFNUcvZXdIejlhOThCLzFUMkZzQ2NybHdXUUlECkFRQUJvNEhDTUlHL01BNEdBMVVkRHdFQi93UUVBd0lGb0RBZEJnTlZIU1VFRmpBVUJnZ3JCZ0VGQlFjREFRWUkKS3dZQkJRVUhBd0l3REFZRFZSMFRBUUgvQkFJd0FEQWZCZ05WSFNNRUdEQVdnQlF2bnkranA5T1loOXlnZDZ5VgpIVW1lQmxSbWx6QmZCZ05WSFJFRVdEQldnaFJsYkdGemRHbGpjMlZoY21Ob0xXMWhjM1JsY29JY1pXeGhjM1JwClkzTmxZWEpqYUMxdFlYTjBaWEl1WkdWbVlYVnNkSUlnWld4aGMzUnBZM05sWVhKamFDMXRZWE4wWlhJdVpHVm0KWVhWc2RDNXpkbU13RFFZSktvWklodmNOQVFFTEJRQURnZ0VCQUVNVFpQQm9WNHhHYWgyVmRCNU9QTmRkdjNVcgpVTkovNWVwTkp6WklvNDlxL3ZSYU9lWGsxL2dHYjBNT0FuS0o2MVJGUDNPZ0xaMFUwRll1eXEzU3czc3BocjAzCkl0U21hNWFmVlF6MGtLT2c0VnZBV2pZcjRkQzR5T3NpRW1UY1ZqM2l4UDZ0amlLdVRxUkdDZE5qaTFuQWRqVDUKSEtIUHhmTHh2dFdVd2ozaEZVOGcxSzNDdmVueVZRVkUxeGRmVkRGVGd6ZWg1cXBsQUFBemxKVk45R20ybElYcgo5TEhwU1cwYXQvOTFwUjVmT3RER05KYnUvWVFSL3BrK3oyNmVjMGdmWi9zMXdFdTJNayt5Q29mMjVOUnlEUXNxCmVmQUtUS1loNzkrblEzU0taeC9TYktRR0lBQ1FpNVdoMmZVMXhSNW1paGJPdDdGTW5iOWZkQzlaeDRvPQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==
  tls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFb3dJQkFBS0NBUUVBNFRTUWczcU5nMG1vb3dSM0h5RlR4YkhYMllFYmVmT1JMVlBRbWRmNVFlNWZoMGxXCnRmc2oydnY2alBpRDBYWU9UT1Z6R0FVc3JuQ2U5NTdNVTJCYzVlQWdyK1B6T1Y3T3FtdWF3U09VcFhQSWVzSUUKV2hzVWt0YVgvRnZCQkVXL2lPcC9oZEtqeXA3NDJNUENERFlQZmVRYVdFQ2E1cnk2RzBnU2NBaGtONXdaVEY0WQppTG1ncHVGa3lzQ0h4OFkxZSttMCtmQk0zL0o0dTV6Rlp4YktkeW05bm9mWWhBZWxrZnNaMXFoNmxjS2U0cEF2CjJhYXMzZ0dxSDhYNzJHQUpNd09xZkhSZ2cvclc2aWxKWW1kQWpMTkxPSkJMcHN6K3dOSndHeTloWnZ3MkdaK2EKOXpVY0s2QTUwTUlLRTVHL2V3SHo5YTk4Qi8xVDJGc0Njcmx3V1FJREFRQUJBb0lCQUhraUgvVklqeU9tRkJvVApSY3V0em5TUTgweGY0SnFaQTJiQkpYd0txbHpuVGVUajhzc1IyYmhwUHR4aXMreVB0cU52NjVkbytSNmZIektMCjdOV1FDSWZ4SlVQV3RiWVBJOVNRNm4ybW1NYmgzMTBBVFB6MmdmdDFoK3pLb2FpZHA2ZUtrcXMxb0xwVkJmNzYKVkw3aXVUUjY1QnpDSzArZkJlKzB0WTRqUlZ5UERLMm5CclZ3MHI4emhoeU4rVEoySnVsb0QxZkpiSFJmYzlNdwpZTzZDSUZKR3lBMjJjSE5PSFA5Zkl0aFd1blNvRzNHL3BjNUNoZFRhYXZOaXE1VEtTazFZMzBaSUo1UEZYTHZSCkNUZis0UllBQjEwYlZKYTlVSGN1RkV1aEh5MEpoLzl5V1Rwc1l3WjdiSkwzNGZIZ1kxc1VWd1BSQUJQazU4SXUKZ2xEdjYyMENnWUVBNkRPLzBCWExnYVkxcW5zc2J6cnNqYURVU3llbDlGeUp1VkRzci9uYlpHNFlvdXBVbTYzOApody9jV0JweVBTZ0NqUXh4T1BWNlJtSzlsQzVaRUEzQWZiS3NnaTZoVDBrT0k4b2haS2MwQjFXamFNNzZvOEtHCmdPeVFpak1KVFBqdEhlL3BCb0Y2MFJvU0R6RjBGQjdrYWphd29DUlJJUytlZ3Z3SEluOEhGMU1DZ1lFQStFazkKcTlmbVptZUp1VTdmbWxSMDU0YlpldTZzUFJCTDcrYmV2RGYwd01uTU9FczIwUlRVRCt3WXRvcHJCQkdyTHM1dgoxdTVXa0dPVEtIU3pLVTVwVVQ4ZUNTSXM3a3lzZ3o1OWZYZy94YUYxdElXR1J0VHlEMFFHcTl5MUx0ZG1QWmV1CnFNSm5wV1dYSHRGL1lYVys3MXBhZWlPdHBQYkt1R0VPbU5aUndDTUNnWUFaU2xtZjdsL0Y5VFp2SlE5SDVpRVIKbyt5N2Fzd1dlMlc4dTJXc0hRaWFQYXVOUXZ5SUlFRWE3TTFSQTBCaUROT0tUVXFmcTR6djBaMVlZRnZ1OWJCNwpnRlJ0c1dwOFdqYWlDMGZyMEpKSUlqbTBGcWNSNHdRSFVyekRjSitZdEp3TzRLeCt1dWVIa3RGWXVrZ3NVTmtNCkFIem9WRXhKMHdmdXVFaUdwMU04WlFLQmdRRGxxSG1QRm1sYmw3SGc0b0FaOUwwZDI3SVc3K1lKcGFWWUJxbEkKV0VuZ2VjaVkyWm1lMURGRGVSTnk1WjRQYVhoNkZ5R0VJWG1ZblVKbFRXemJiRmdtZXNlQmswY1VOWC9zOWtTRgpabEUyc1I1N0dIY1gxYWtCVGQ4TjRWMEdNdCt6WVRhQml6RHI0SWhrVFV3U0RpUEtxankrZFhvTStPcVNtZFF5CnN5dHpHUUtCZ0crOCt0YWNlb0h5SjM0QlBCQWp0d3Y0eTlUK3hvNDVlNjhpdE9WOElNWWJFVjI5TXM4ZTRKWEkKMHNwU1JQZlpZZnI5eUF0QThxd3JzWG9TYWIyWmQwVDZHMnNQY2Q5VVhwYVV4YVRnWWNSZlhwOERMNXVmTUN1dApneGFDcDVPT1BNeUFvZG0wL0g3OXVucHJYOHlWMkNsVTJ4RFZWODFuTCtZd0FKYncyczJBCi0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0tCg==
  ca.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURJakNDQWdxZ0F3SUJBZ0lSQUx1MjlnRWFvWlFTT3NvRllDUWdQNll3RFFZSktvWklodmNOQVFFTEJRQXcKR3pFWk1CY0dBMVVFQXhNUVpXeGhjM1JwWTNObFlYSmphQzFqWVRBZUZ3MHlNekEzTURZd016TTRNamxhRncweQpOREEzTURVd016TTRNamxhTUJzeEdUQVhCZ05WQkFNVEVHVnNZWE4wYVdOelpXRnlZMmd0WTJFd2dnRWlNQTBHCkNTcUdTSWIzRFFFQkFRVUFBNElCRHdBd2dnRUtBb0lCQVFEZjJSeDZ6ODNaaitva0ordm9sWFRaV09NRDQxRFMKS2trcjFQejF4UW0xa1E3SjRiMUtIaldNdGtFVlpaRkdBVGFNNTI3ZFNJcndsUmRMM3ZvMHI2Mng4YTRhRldKawo2eDgyb2UzVUliMXUzbkg1RDhldDREaUxtbjJHYWNEWHpHbEhxczVjR3owR2RhcGluM2x3RDFJcFFHdVRnTVJMCmxXdkcxMytXZ1FLY2lBUWlqVGdzeFVzeDdtM1VNTjdxSU5UWmorclNzU284amlBQ1dueHk1V1Z1aEZBU1l1eHoKQXNTTXhDWmNxMC9rQm1sUmRXVnVSemNrWW1qZHZwNHdXNnBuc0d1czY2bXBFSWhlcXd1WEgrUVZER0o5b2N6UgoxbzF6WUxEL3FaS3hzaDRPS09Yc1B6MHhxRmVDcGtyaithQmxkUDdWK29CTjB6NnN6blByZjh6TkFnTUJBQUdqCllUQmZNQTRHQTFVZER3RUIvd1FFQXdJQ3BEQWRCZ05WSFNVRUZqQVVCZ2dyQmdFRkJRY0RBUVlJS3dZQkJRVUgKQXdJd0R3WURWUjBUQVFIL0JBVXdBd0VCL3pBZEJnTlZIUTRFRmdRVUw1OHZvNmZUbUlmY29IZXNsUjFKbmdaVQpacGN3RFFZSktvWklodmNOQVFFTEJRQURnZ0VCQUhLUE9rREpLUWlScHBScEI2Q1dwTlNUcDl6bjV6S3IwM1AyCjgvYStJMTMwQWorMnVOYmQ5UEs2OUNPNThTS0NFY084TkhwTkxTSndsR2FpTzhsbWtLZVpaQkhUNzYyV2xTOEEKQjVjVXFMZlVMZVRvVWcwQXlpMUVhc1JNZE1rd2dYQXNYSVdybkFscW42L2FYY0FNSXA0allJU2pUYkIxa2ZDWApXZWN0V25zRXBYZ2xyNERDaVlHaTY5b21KNTdjaWtwb0VBWmQxdVZFL3JFaXFwRW14NEF3VlUvUUYzako3bGVZCnYvak1XRjhHN0p5dUd5SURBV0RJWDRGL3g5aS9oSSttV21BQ211OEFFbXZ0SEJZYlNMRWxNWXI3bkwrYzNER0YKSnYrNHZYOUZkb09xdkFsWVBTd1pOSjN3YnducHpiTS9yWGM3T3VxQ0V4VlpCbDZUMmh3PQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==
---
# Source: elasticsearch/templates/secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: elasticsearch-master-credentials
  labels:
    heritage: "Helm"
    release: "release-name"
    chart: "elasticsearch"
    app: "elasticsearch-master"
type: Opaque
data:
  username: ZWxhc3RpYw==
  password: "TEVJRnhTV0JIUGp6YkdGZQ=="
---
# Source: elasticsearch/templates/service.yaml
kind: Service
apiVersion: v1
metadata:
  name: elasticsearch-master
  labels:
    heritage: "Helm"
    release: "release-name"
    chart: "elasticsearch"
    app: "elasticsearch-master"
  annotations:
    {}
spec:
  type: ClusterIP
  selector:
    release: "release-name"
    chart: "elasticsearch"
    app: "elasticsearch-master"
  publishNotReadyAddresses: false
  ports:
  - name: http
    protocol: TCP
    port: 9200
  - name: transport
    protocol: TCP
    port: 9300
---
# Source: elasticsearch/templates/service.yaml
kind: Service
apiVersion: v1
metadata:
  name: elasticsearch-master-headless
  labels:
    heritage: "Helm"
    release: "release-name"
    chart: "elasticsearch"
    app: "elasticsearch-master"
  annotations:
    service.alpha.kubernetes.io/tolerate-unready-endpoints: "true"
spec:
  clusterIP: None # This is needed for statefulset hostnames like elasticsearch-0 to resolve
  # Create endpoints also if the related pod isn't ready
  publishNotReadyAddresses: true
  selector:
    app: "elasticsearch-master"
  ports:
  - name: http
    port: 9200
  - name: transport
    port: 9300
---
# Source: elasticsearch/templates/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: elasticsearch-master
  labels:
    heritage: "Helm"
    release: "release-name"
    chart: "elasticsearch"
    app: "elasticsearch-master"
  annotations:
    esMajorVersion: "8"
spec:
  serviceName: elasticsearch-master-headless
  selector:
    matchLabels:
      app: "elasticsearch-master"
  replicas: 3
  podManagementPolicy: Parallel
  updateStrategy:
    type: RollingUpdate
  #volumeClaimTemplates:
  #- metadata:
      #name: elasticsearch-master
    #spec:
      #accessModes:
      #- ReadWriteOnce
      #resources:
        #requests:
          #storage: 30Gi
  template:
    metadata:
      name: "elasticsearch-master"
      labels:
        release: "release-name"
        chart: "elasticsearch"
        app: "elasticsearch-master"
      annotations:
        
    spec:
      securityContext:
        fsGroup: 1000
        runAsUser: 1000
      automountServiceAccountToken: true
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchExpressions:
              - key: app
                operator: In
                values:
                - "elasticsearch-master"
            topologyKey: kubernetes.io/hostname
      terminationGracePeriodSeconds: 120
      volumes:
        - name: elasticsearch-certs
          secret:
           secretName: elasticsearch-master-certs
        - name: elasticsearch-master
          emptyDir: {}
      enableServiceLinks: true
      initContainers:
      - name: configure-sysctl
        securityContext:
          runAsUser: 0
          privileged: false
        image: "reg-hosted-lab.kcntt.net/elasticsearch:8.5.1"
        imagePullPolicy: "IfNotPresent"
        command: ["sysctl", "-w", "vm.max_map_count=262144"]
        resources:
          {}

      containers:
      - name: "elasticsearch"
        securityContext:
          capabilities:
            drop:
            - ALL
          runAsNonRoot: true
          runAsUser: 1000
        image: "reg-hosted-lab.kcntt.net/elasticsearch:8.5.1"
        imagePullPolicy: "IfNotPresent"
        readinessProbe:
          exec:
            command:
              - bash
              - -c
              - |
                set -e

                # Exit if ELASTIC_PASSWORD in unset
                if [ -z "${ELASTIC_PASSWORD}" ]; then
                  echo "ELASTIC_PASSWORD variable is missing, exiting"
                  exit 1
                fi

                # If the node is starting up wait for the cluster to be ready (request params: "wait_for_status=green&timeout=1s" )
                # Once it has started only check that the node itself is responding
                START_FILE=/tmp/.es_start_file

                # Disable nss cache to avoid filling dentry cache when calling curl
                # This is required with Elasticsearch Docker using nss < 3.52
                export NSS_SDB_USE_CACHE=no

                http () {
                  local path="${1}"
                  local args="${2}"
                  set -- -XGET -s

                  if [ "$args" != "" ]; then
                    set -- "$@" $args
                  fi

                  set -- "$@" -u "elastic:${ELASTIC_PASSWORD}"

                  curl --output /dev/null -k "$@" "https://127.0.0.1:9200${path}"
                }

                if [ -f "${START_FILE}" ]; then
                  echo 'Elasticsearch is already running, lets check the node is healthy'
                  HTTP_CODE=$(http "/" "-w %{http_code}")
                  RC=$?
                  if [[ ${RC} -ne 0 ]]; then
                    echo "curl --output /dev/null -k -XGET -s -w '%{http_code}' \${BASIC_AUTH} https://127.0.0.1:9200/ failed with RC ${RC}"
                    exit ${RC}
                  fi
                  # ready if HTTP code 200, 503 is tolerable if ES version is 6.x
                  if [[ ${HTTP_CODE} == "200" ]]; then
                    exit 0
                  elif [[ ${HTTP_CODE} == "503" && "8" == "6" ]]; then
                    exit 0
                  else
                    echo "curl --output /dev/null -k -XGET -s -w '%{http_code}' \${BASIC_AUTH} https://127.0.0.1:9200/ failed with HTTP code ${HTTP_CODE}"
                    exit 1
                  fi

                else
                  echo 'Waiting for elasticsearch cluster to become ready (request params: "wait_for_status=green&timeout=1s" )'
                  if http "/_cluster/health?wait_for_status=green&timeout=1s" "--fail" ; then
                    touch ${START_FILE}
                    exit 0
                  else
                    echo 'Cluster is not yet ready (request params: "wait_for_status=green&timeout=1s" )'
                    exit 1
                  fi
                fi
          failureThreshold: 3
          initialDelaySeconds: 10
          periodSeconds: 10
          successThreshold: 3
          timeoutSeconds: 5
        ports:
        - name: http
          containerPort: 9200
        - name: transport
          containerPort: 9300
        resources:
          limits:
            cpu: 1000m
            memory: 2Gi
          requests:
            cpu: 1000m
            memory: 2Gi
        env:
          - name: node.name
            valueFrom:
              fieldRef:
                fieldPath: metadata.name
          - name: cluster.initial_master_nodes
            value: "elasticsearch-master-0,elasticsearch-master-1,elasticsearch-master-2,"
          - name: node.roles
            value: "master,data,data_content,data_hot,data_warm,data_cold,ingest,ml,remote_cluster_client,transform,"
          - name: discovery.seed_hosts
            value: "elasticsearch-master-headless"
          - name: cluster.name
            value: "elasticsearch"
          - name: network.host
            value: "0.0.0.0"
          - name: ELASTIC_PASSWORD
            valueFrom:
              secretKeyRef:
                name: elasticsearch-master-credentials
                key: password
          - name: xpack.security.enabled
            value: "true"
          - name: xpack.security.transport.ssl.enabled
            value: "true"
          - name: xpack.security.http.ssl.enabled
            value: "true"
          - name: xpack.security.transport.ssl.verification_mode
            value: "certificate"
          - name: xpack.security.transport.ssl.key
            value: "/usr/share/elasticsearch/config/certs/tls.key"
          - name: xpack.security.transport.ssl.certificate
            value: "/usr/share/elasticsearch/config/certs/tls.crt"
          - name: xpack.security.transport.ssl.certificate_authorities
            value: "/usr/share/elasticsearch/config/certs/ca.crt"
          - name: xpack.security.http.ssl.key
            value: "/usr/share/elasticsearch/config/certs/tls.key"
          - name: xpack.security.http.ssl.certificate
            value: "/usr/share/elasticsearch/config/certs/tls.crt"
          - name: xpack.security.http.ssl.certificate_authorities
            value: "/usr/share/elasticsearch/config/certs/ca.crt"
          - name: xpack.security.enrollment.enabled
            value: "true"
        volumeMounts:
          - name: "elasticsearch-master"
            mountPath: /usr/share/elasticsearch/data
          - name: elasticsearch-certs
            mountPath: /usr/share/elasticsearch/config/certs
            readOnly: true
